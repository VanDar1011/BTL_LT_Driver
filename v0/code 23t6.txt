#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/usb.h>
#include <linux/cdev.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/slab.h>
// Thông tin về device USB mà driver này hỗ trợ
#define VENDOR_ID  0x21c4
#define PRODUCT_ID 0x0cd1
// Declaration character_device 
#define DEVICE_NAME "usb_crypto"
#define CLASS_NAME "usb_class"
#define MY_MAJOR		42
#define MY_MINOR		0
#define NUM_MINORS		1
#define BUF_SIZE 1024 
// Manager device
static struct usb_device *device;
static struct class *class;
static struct cdev cdev;
static dev_t devt;
// kiich thuo
static char device_buffer[BUF_SIZE] = {0};
static int device_buffer_len = 0;
static int device_read_complete = 0;

static int device_open(struct inode *inode, struct file *file) {
	 printk(KERN_INFO "usb_control: Device opened\n");
    return 0;
}

static int device_release(struct inode *inode, struct file *file) {
 	 printk(KERN_INFO "usb_control: Device closed\n");
    return 0;
}

static ssize_t device_read(struct file *file, char __user *buf, size_t count, loff_t *ppos) {
    int bytes_to_copy;

    // Kiểm tra xem đã đọc xong chưa
    if (device_read_complete) {
        return 0; // Trả về 0 để báo hiệu hết dữ liệu
    }

    // Xác định số lượng byte có thể đọc (tối đa là count)
    bytes_to_copy = min(count, (size_t)device_buffer_len);

    // Sao chép dữ liệu từ kernel space (device_buffer) sang user space (buf)
    if (copy_to_user(buf, device_buffer, bytes_to_copy) != 0) {
        return -EFAULT;  // Lỗi sao chép dữ liệu
    }

    // Đánh dấu đã đọc hoàn thành và reset lại bộ đệm
    device_read_complete = 1;
    device_buffer_len = 0;

    // Cập nhật vị trí con trỏ file và độ dài của bộ đệm
    *ppos += bytes_to_copy;

    return bytes_to_copy; 
}
static ssize_t device_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos) {
    int bytes_to_copy;

    // Xác định số lượng byte có thể ghi (tối đa là count)
    bytes_to_copy = min(count, (size_t)(BUF_SIZE - *ppos));

    // Sao chép dữ liệu từ user space (buf) vào kernel space (device_buffer)
    if (copy_from_user(device_buffer + *ppos, buf, bytes_to_copy) != 0) {
        return -EFAULT;  // Lỗi sao chép dữ liệu
    }

    // Cập nhật vị trí con trỏ file và độ dài của bộ đệm
    *ppos += bytes_to_copy;
    device_buffer_len = *ppos;  // Cập nhật kích thước thực tế của dữ liệu trong bộ đệm

    // Đánh dấu chưa đọc hoàn thành khi có dữ liệu mới ghi vào
    device_read_complete = 0;

    return bytes_to_copy;
}

// device_ioctl
static long device_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
    // Điều khiển thiết bị (tạm thời không thực hiện gì)
    return 0;
}

static struct file_operations fops = {
    .owner = THIS_MODULE,
    .open = device_open,
    .release = device_release,
    .read = device_read,
    .write = device_write,
    .unlocked_ioctl = device_ioctl,
};

// simple_usb_probe connect
static int simple_usb_probe(struct usb_interface *interface, const struct usb_device_id *id) {
    int result;

    device = interface_to_usbdev(interface);
    printk(KERN_INFO "Simple USB device (%04X:%04X) plugged\n", id->idVendor, id->idProduct);

    //result = alloc_chrdev_region(&devt, 0, 1, DEVICE_NAME);
    devt = MKDEV(MY_MAJOR, MY_MINOR);  // Sử dụng major = 24, minor = 0
    result = register_chrdev_region(devt, NUM_MINORS, DEVICE_NAME);
    if (result < 0) {
        printk(KERN_ERR "Failed to register char device region\n");
        return result;
    }
    if (result < 0) {
        printk(KERN_ERR "Failed to allocate a major number\n");
        return result;
    }

    class = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(class)) {
        unregister_chrdev_region(devt, 1);
        printk(KERN_ERR "Failed to create the device class\n");
        return PTR_ERR(class);
    }

    if (device_create(class, NULL, devt, NULL, DEVICE_NAME) == NULL) {
        class_destroy(class);
        unregister_chrdev_region(devt, 1);
        printk(KERN_ERR "Failed to create the device\n");
        return -1;
    }

    cdev_init(&cdev, &fops);
    cdev.owner = THIS_MODULE;
    if (cdev_add(&cdev, devt, 1) == -1) {
        device_destroy(class, devt);
        class_destroy(class);
        unregister_chrdev_region(devt, 1);
        printk(KERN_ERR "Failed to add cdev\n");
        return -1;
    }

    return 0;
}
// simple_usb_disconnect 
static void simple_usb_disconnect(struct usb_interface *interface) {
    printk(KERN_INFO "Simple USB device removed\n");
    cdev_del(&cdev);
    device_destroy(class, devt);
    class_destroy(class);
    unregister_chrdev_region(devt, 1);
}

// Một bảng định nghĩa các USB device mà driver này hỗ trợ
static struct usb_device_id simple_usb_table[] = {
    { USB_DEVICE(VENDOR_ID, PRODUCT_ID) },
    {} // Dấu kết thúc bảng
};
MODULE_DEVICE_TABLE(usb, simple_usb_table);

// Cấu trúc usb_driver
static struct usb_driver simple_usb_driver = {
    .name = "usb_driver",
    .id_table = simple_usb_table,
    .probe = simple_usb_probe,
    .disconnect = simple_usb_disconnect,
};
// Hàm khởi tạo module
static int __init simple_usb_init(void)
{
    return usb_register(&simple_usb_driver);
}

// Hàm dọn dẹp module
static void __exit simple_usb_exit(void)
{
    usb_deregister(&simple_usb_driver);
}

module_init(simple_usb_init);
module_exit(simple_usb_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Simple USB Driver Example");
